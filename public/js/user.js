import apiRequest from "./apirequest.js";

/* A small data model to represent a Post. */
export class Post {
  /* data is the post data from the API. */
  constructor(data) {
    /* Technically we don't have a full User object here (no followers list), but this is still useful. */
    this.user = new User(data.user);
    this.time = new Date(data.time);
    this.text = data.text;
  }
}

/* A data model representing a user of the app. */
export default class User {
  /* Returns an array of user IDs. */
  static async listUsers() {
    let data = await apiRequest("GET", "/users");
    return data.users;
  }

  /* Returns a User instance, creating the user if necessary. */
  static async loadOrCreate(id) {
    let res = await fetch(`/api/users/${id}`);
    let data = await res.json();
    if (data) {
      return new User(data);
    } else {
      // If the user doesn't exist, create a new one
      let newUser = new User({ id: id });
      await newUser.save(); // Save the new user to the backend
      return newUser;
    }
  }
  /* data is the user object from the API. */
  constructor(data) {
    this.id = data.id;
    this.name = data.name;
    this.avatarURL = data.avatarURL;
    this.following = data.following || []; // Dữ liệu về những người mà người dùng này đang theo dõi
  }

  /* The string representation of a User is their display name. */
  toString() {
    return this.name;
  }

  /* Returns an Object containing only the instances variables we want to send back to the API when we save() the user. */
  toJSON() {
    return {
      name: this.name,
      avatarURL: this.avatarURL,
    };
  }

  /* Save the current state (name and avatar URL) of the user to the server. */
  /* Save the current state (name and avatar URL) of the user to the server. */
  async save() {
    try {
      await apiRequest("PATCH", `/users/${this.id}`, {
        name: this.name,
        avatarURL: this.avatarURL,
      });
    } catch (error) {
      console.error("Error saving user:", error);
      throw error;
    }
  }

  /* Gets the user's current feed. Returns an Array of Post objects. */
  async getFeed() {
    try {
      let data = await apiRequest("GET", `/users/${this.id}/feed`);
      return data.posts.map((postData) => new Post(postData));
    } catch (error) {
      console.error("Error getting user feed:", error);
      throw error;
    }
  }

  /* Create a new post with hte given text. */
  async makePost(text) {
    try {
      await apiRequest("POST", `/users/${this.id}/posts`, { text });
    } catch (error) {
      console.error("Error making post:", error);
      throw error;
    }
  }

  /* Start following the specified user id. Does not handle any HTTPErrors generated by the API. */
  async addFollow(id) {
    try {
      await apiRequest("POST", `/users/${this.id}/follow`, { id });
    } catch (error) {
      console.error("Error adding follow:", error);
      throw error;
    }
  }

  /* Stop following the specified user id. Does not handle any HTTPErrors generated by the API. */
  async deleteFollow(id) {
    try {
      await apiRequest("DELETE", `/users/${this.id}/follow`, { id });
    } catch (error) {
      console.error("Error deleting follow:", error);
      throw error;
    }
  }
}
